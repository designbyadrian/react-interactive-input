import{j as V}from"./jsx-runtime-j_jdvEMj.js";import{r as i}from"./index-B-o1Wr-g.js";function x(){let t="";return function(s){const a=/^-?\d*([.,]?)\d*$/,u=s.match(a);return u&&(t=u[0]),t}}const M=t=>{const n=t.toString().split(".");return n.length>1?n[1].length:0},D=(t,n)=>Object.assign({},t,{target:{...t.currentTarget,value:n,name:t.target.name}}),E=x(),R=i.forwardRef(({mask:t=E,onChange:n,step:s=1,value:a,...u},f)=>{const[c,o]=i.useState(a||""),h=f||i.useRef(null),b=e=>{e.persist();const{value:l}=e.target,r=t(l);o(r),n&&n(D(e,r.replace(",",".")))},p=(e,l)=>{e.persist();const r=e.target,d=parseFloat(c.replace(",","."))||0,m=parseFloat(s.toString()),v=M(+s),y=(l?d+m:d-m).toFixed(v),g=t(y);if(o(g),n){const k={...new Event("change",{bubbles:!0}),target:{...r,value:g.replace(",","."),name:r.name}};n(k)}},w=e=>{e.key==="ArrowUp"?(e.preventDefault(),p(e,!0)):e.key==="ArrowDown"&&(e.preventDefault(),p(e,!1))};return i.useEffect(()=>{o(a||"")},[a]),V.jsx("input",{...u,type:"text",ref:h,value:c,onChange:b,onKeyDown:w})});R.__docgenInfo={description:"A React input component featuring input masking specifically designed to address limitations with negative numbers in standard HTML input elements. This component ensures that negative values are properly formatted and accepted by the input field, preventing unexpected behavior or errors when handling signed numbers.",methods:[],displayName:"MaskedInput",props:{mask:{required:!1,tsType:{name:"signature",type:"function",raw:"(rawValue: string) => string",signature:{arguments:[{type:{name:"string"},name:"rawValue"}],return:{name:"string"}}},description:"Masking function to apply to the input value. Defaults to `numberMask` which ensures that the input value is a valid number, including negative numbers.",defaultValue:{value:"createNumberMask()",computed:!0}},value:{required:!1,tsType:{name:"string"},description:""},step:{defaultValue:{value:"1",computed:!1},required:!1}}};export{R as M,M as g};
